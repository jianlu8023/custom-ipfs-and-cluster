networks:
  ipfs:
    name: "ipfs_test_net"
    ipam:
      config:
        - gateway: 99.99.97.1
          subnet: 99.99.97.0/24
    driver: bridge

volumes:
  jaeger_badger_data:
    driver: local
    driver_opts:
      type: none
      device: ./compose/jaeger/badger
      o: bind

services:
  jaeger:
    user: root
    privileged: true
    image: jaegertracing/all-in-one:1.62.0
    networks:
      ipfs:
        ipv4_address: 99.99.97.2
    restart: always
    command:
      - "--badger.span-store-ttl=72h0m0s"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_ENCODING=console
      - LOG_LEVEL=info
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - OTEL_TRACES_SAMPLER=always_off
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    ports:
      - "5775:5775/udp"
      - "6831-6832:6831-6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "4317-4318:4317-4318"
      - "9411:9411"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - jaeger_badger_data:/badger
    container_name: jaeger
    healthcheck:
      timeout: 5s
      retries: 5
      interval: 60s
      test: ["CMD","wget","-O","-","-q","http://127.0.0.1:14269/health"]

  ipfs:
    restart: always
    container_name: ipfs
    image: ipfs-image:latest
    environment:
      IPFS_LOGGING:
      # https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md
      # https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/sdk-environment-variables.md#exporter-selection
      OTEL_EXPORTER_FILE_PATH: /data/ipfs/traces.json
      OTEL_EXPORTER_OTLP_INSECURE: true
      OTEL_TRACES_EXPORTER: otlp,file
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4318
    networks:
      - ipfs
    ports:
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ./compose/ipfs:/data/ipfs
    depends_on:
      jaeger:
        condition: service_healthy


  cluster:
    restart: always
    container_name: cluster
    networks:
      - ipfs
    image: cluster-image:latest
    depends_on:
      ipfs:
        condition: service_healthy
    command: --loglevel info daemon
    env_file:
      - .env
    environment:
      CLUSTER_PEERNAME: node110
      CLUSTER_SECRET: ${CLUSTER_SECRET}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: '*'
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094
      CLUSTER_IPFSPROXY_LISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9095
      CLUSTER_IPFSPROXY_NODEMULTIADDRESS: /dns4/ipfs/tcp/5001
      CLUSTER_MONITORPINGINTERVAL: 2s
      CLUSTER_METRICS_ENABLESTATS: true
      CLUSTER_METRICS_PROMETHEUSENDPOINT: /ip4/0.0.0.0/tcp/8888
      CLUSTER_TRACING_ENABLETRACING: true
      CLUSTER_TRACING_JAEGERAGENTENDPOINT: /dns4/jaeger/udp/6831
    ports:
      - "9094:9094"
      - "9095:9095"
      - "8888:8888"
      - "9096:9096"
    volumes:
      - ./compose/cluster:/data/ipfs-cluster
    healthcheck:
      test: [ "CMD","ipfs-cluster-ctl","health","metrics","ping" ]
      interval: 60s
      timeout: 3s
      retries: 5
